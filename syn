if not isfile("aloaded/logtype.txt") then
    writefile("aloaded/logtype.txt", "rConsole")    
end

local startFOV = game.Workspace.CurrentCamera.FieldOfView


local RS = game:GetService("RunService")
local frames = 0

RS.RenderStepped:Connect(function()
	frames = frames + 1
end)

local RemoteFunction = game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.MutePlayerRequest -- Cannot created from client it has to be SOME remote function.

local Start = tick()
RemoteFunction:InvokeServer()
local Latency = tick() - Start

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/vozoid/ui-libraries/main/drawing/void/source.lua"))()

local watermark = library:Watermark("a loaded exploit | " .. frames .. " fps | v0.1 | dev")

spawn(function()
    while wait(1) do
        local Start = tick()
        RemoteFunction:InvokeServer()
        local Latency = tick() - Start
        watermark:Set("a loaded exploit | " .. frames .. " fps | " .. math.floor(Latency * 1000) .. " ping | v0.1 | syn | dev")
        frames = 0
    end
end)

local main = library:Load{
    Name = "a loaded exploit",
    SizeX = 650,
    SizeY = 700,
    Theme = "Midnight",
    Extension = "json", -- config file extension
    Folder = "aloaded" -- config folder name
}

--[[
local tab = main:Tab("visuals")
--]]



appendfile("aloaded/info.txt", "start | ")






















































































































































function logtype()
    if readfile("aloaded/logtype.txt") == "rConsole" then return "rConsole" else return "ingameConsole" end
end

if logtype() == "rConsole" then rconsoleprint("@@WHITE@@") end






local tab = main:Tab("settings")

local keybindsection = tab:Section{Name = "keybinds", Side = "Left"}

keybindsection:Keybind{
    Name = "ui toggle",
    Flag = "UI Toggle",
    Default = Enum.KeyCode.RightShift,
    Blacklist = {Enum.UserInputType.MouseButton1, Enum.UserInputType.MouseButton2, Enum.UserInputType.MouseButton3},
    Callback = function(_, fromsetting)
        if not fromsetting then
            library:Close()
            if logtype() == "rConsole" then rconsoleprint("toggled ui\n") else print("toggled ui") end
        end
    end
}

keybindsection:Keybind{
    Name = "panic keybind",
    Flag = "PanicKeybind",
    Default = Enum.KeyCode.RightAlt,
    Blacklist = {Enum.UserInputType.MouseButton1, Enum.UserInputType.MouseButton2, Enum.UserInputType.MouseButton3},
    Callback = function(_, fromsetting)
        if not fromsetting then
            library:Unload()
            game.Workspace.CurrentCamera.FieldOfView = startFOV
            if logtype() == "rConsole" then rconsoleprint("panic unloaded ui\n") else print("panic unloaded ui") end
            delfile("aloaded/executed.txt", "no")
        end
    end
}

appendfile("aloaded/info.txt", "keybinds | ")

local configsection = tab:Section{Name = "Configs", Side = "Left"}

local configlist = configsection:Dropdown{
    Name = "Configs",
    Content = library:GetConfigs(), -- GetConfigs(true) if you want universal configs
    Flag = "Config Dropdown"
}

library:ConfigIgnore("Config Dropdown")

local loadconfig = configsection:Button{
    Name = "Load Config",
    Callback = function()
        library:LoadConfig(library.flags["Config Dropdown"]) -- LoadConfig(library.flags["Config Dropdown"], true)  if you want universal configs
        if logtype() == "rConsole" then rconsoleprint("loaded config\n") else print("loaded config") end
    end
}

local delconfig = configsection:Button{
    Name = "Delete Config",
    Callback = function()
        library:DeleteConfig(library.flags["Config Dropdown"]) -- DeleteConfig(library.flags["Config Dropdown"], true)  if you want universal configs
        configlist:Refresh(library:GetConfigs())
        if logtype() == "rConsole" then rconsoleprint("deleted config\n") else print("deleted config") end
    end
}


local configbox = configsection:Box{
    Name = "Config Name",
    Placeholder = "Config Name",
    Flag = "Config Name"
}

library:ConfigIgnore("Config Name")

local save = configsection:Button{
    Name = "Save Config",
    Callback = function()
        library:SaveConfig(library.flags["Config Dropdown"] or library.flags["Config Name"]) -- SaveConfig(library.flags["Config Name"], true) if you want universal configs
        configlist:Refresh(library:GetConfigs())
        if logtype() == "rConsole" then rconsoleprint("saved config\n") else print("saved config") end
    end
}

local section = tab:Section{
    Name = "whitelist info",
    Side = "Right"
}

local name = game.Players.LocalPlayer.Name

function getUser()
    if name == "daimonds007" then return "real" elseif name == "HungryMuttis" then return "HungryMuttis" elseif name == "dr_draylbox" then return "Punktike" elseif name == "VeaBeeCuzYeah" then return "VeaBee" else return "unknown" end
end

function getKey()
    if getUser() == "real" then return "B2ZUVhHegmJRktDF" elseif getUser() == "HungryMuttis" then return "yaVE8N3bepQJSCP6" elseif getUser() == "Punktike" then return "dmf3cVUPtDChEQaG" elseif getUser() == "VeaBee" then return "IXhcBzvYWgNKDTwk" elseif getUser() == "unknown" then return "xxx" end
end

function getWLType()
    if getKey() == "B2ZUVhHegmJRktD" then return "Owner" elseif getKey() == "yaVE8N3bepQJSCP6" then return "Developer" else if getKey() ~= "xxx" then return "Premium" else return "Free" end end    
end

local label = section:Label("User: " .. getUser())
local label = section:Label("Key: " .. getKey())
local label = section:Label("Whitelist status: " .. getWLType())



local themes = tab:Section{Name = "Theme", Side = "Left"}

local themepickers = {}

local themelist = themes:Dropdown{
    Name = "Theme",
    Default = library.currenttheme,
    Content = library:GetThemes(),
    Flag = "Theme Dropdown",
    Callback = function(option)
        if option then
            library:SetTheme(option)

            for option, picker in next, themepickers do
                picker:Set(library.theme[option])
            end
        end
    end
}

library:ConfigIgnore("Theme Dropdown")

local namebox = themes:Box{
    Name = "Custom Theme Name",
    Placeholder = "Custom Theme",
    Flag = "Custom Theme"
}

library:ConfigIgnore("Custom Theme")

themes:Button{
    Name = "Save Custom Theme",
    Callback = function()
        if library:SaveCustomTheme(library.flags["Custom Theme"]) then
            themelist:Refresh(library:GetThemes())
            themelist:Set(library.flags["Custom Theme"])
            namebox:Set("")
        end
    end
}

local customtheme = tab:Section{Name = "Custom Theme", Side = "Right"}

themepickers["Accent"] = customtheme:ColorPicker{
    Name = "Accent",
    Default = library.theme["Accent"],
    Flag = "Accent",
    Callback = function(color)
        library:ChangeThemeOption("Accent", color)
    end
}

library:ConfigIgnore("Accent")

themepickers["Window Background"] = customtheme:ColorPicker{
    Name = "Window Background",
    Default = library.theme["Window Background"],
    Flag = "Window Background",
    Callback = function(color)
        library:ChangeThemeOption("Window Background", color)
    end
}

library:ConfigIgnore("Window Background")

themepickers["Window Border"] = customtheme:ColorPicker{
    Name = "Window Border",
    Default = library.theme["Window Border"],
    Flag = "Window Border",
    Callback = function(color)
        library:ChangeThemeOption("Window Border", color)
    end
}

library:ConfigIgnore("Window Border")

themepickers["Tab Background"] = customtheme:ColorPicker{
    Name = "Tab Background",
    Default = library.theme["Tab Background"],
    Flag = "Tab Background",
    Callback = function(color)
        library:ChangeThemeOption("Tab Background", color)
    end
}

library:ConfigIgnore("Tab Background")

themepickers["Tab Border"] = customtheme:ColorPicker{
    Name = "Tab Border",
    Default = library.theme["Tab Border"],
    Flag = "Tab Border",
    Callback = function(color)
        library:ChangeThemeOption("Tab Border", color)
    end
}

library:ConfigIgnore("Tab Border")

themepickers["Tab Toggle Background"] = customtheme:ColorPicker{
    Name = "Tab Toggle Background",
    Default = library.theme["Tab Toggle Background"],
    Flag = "Tab Toggle Background",
    Callback = function(color)
        library:ChangeThemeOption("Tab Toggle Background", color)
    end
}

library:ConfigIgnore("Tab Toggle Background")

themepickers["Section Background"] = customtheme:ColorPicker{
    Name = "Section Background",
    Default = library.theme["Section Background"],
    Flag = "Section Background",
    Callback = function(color)
        library:ChangeThemeOption("Section Background", color)
    end
}

library:ConfigIgnore("Section Background")

themepickers["Section Border"] = customtheme:ColorPicker{
    Name = "Section Border",
    Default = library.theme["Section Border"],
    Flag = "Section Border",
    Callback = function(color)
        library:ChangeThemeOption("Section Border", color)
    end
}

library:ConfigIgnore("Section Border")

themepickers["Text"] = customtheme:ColorPicker{
    Name = "Text",
    Default = library.theme["Text"],
    Flag = "Text",
    Callback = function(color)
        library:ChangeThemeOption("Text", color)
    end
}

library:ConfigIgnore("Text")

themepickers["Disabled Text"] = customtheme:ColorPicker{
    Name = "Disabled Text",
    Default = library.theme["Disabled Text"],
    Flag = "Disabled Text",
    Callback = function(color)
        library:ChangeThemeOption("Disabled Text", color)
    end
}

library:ConfigIgnore("Disabled Text")

themepickers["Object Background"] = customtheme:ColorPicker{
    Name = "Object Background",
    Default = library.theme["Object Background"],
    Flag = "Object Background",
    Callback = function(color)
        library:ChangeThemeOption("Object Background", color)
    end
}

library:ConfigIgnore("Object Background")

themepickers["Object Border"] = customtheme:ColorPicker{
    Name = "Object Border",
    Default = library.theme["Object Border"],
    Flag = "Object Border",
    Callback = function(color)
        library:ChangeThemeOption("Object Border", color)
    end
}

library:ConfigIgnore("Object Border")

themepickers["Dropdown Option Background"] = customtheme:ColorPicker{
    Name = "Dropdown Option Background",
    Default = library.theme["Dropdown Option Background"],
    Flag = "Dropdown Option Background",
    Callback = function(color)
        library:ChangeThemeOption("Dropdown Option Background", color)
    end
}

library:ConfigIgnore("Dropdown Option Background")

local nessential = tab:Section{Name = "loading settings", Side = "Left"}

local dropdown = nessential:Dropdown{
    Name = "Main executor",
    --Default = "Option 1",
    Scrollable = true,
    ScrollingMax = 5,
    Content = {
        "syn",
        "sw"
    },
    Flag = "mainexecutor",
    Callback = function(option)
        writefile("aloaded/loaded.txt", tostring(option))
        if logtype() == "rConsole" then rconsoleprint("changed main executor\n") else print("changed main executor") end
    end
}

local toggle = nessential:Toggle{
    Name = "skip sign-up",
    Flag = "ssignup",
    --Default = true,
    Callback  = function(bool)
        if (bool and "true" or "false") == true then
            writefile("aloaded/skip.txt", "true")
        else
            writefile("aloaded/skip.txt", "false")
        end
        if logtype() == "rConsole" then rconsoleprint("changed skip sign up\n") else print("changed skip signup") end
    end
}

local nessential = tab:Section{Name = "non essential visuals", Side = "Left"}

nessential:Slider{
    Text = "[value]/120 fov",
    Default = startFOV,
    Min = 30,
    Max = 120,
    Float = 0.5,
    Flag = "field of view",
    Callback = function(value)
        if value ~= oaaa then
            yessir = true
        elseif value == oaaa then
            yessir = false
        end
        spawn(function()
            while wait(0.03) do
                game.Workspace.CurrentCamera.FieldOfView = value
                if yessir then
                    break    
                end
            end
        end)
        local oaaa = value
        if logtype() == "rConsole" then rconsoleprint("changed fov\n") else print("changed fov") end
    end
}

nessential:Button{
    Name = "set fov to default",
    Callback  = function()
        game.Workspace.CurrentCamera.FieldOfView = startFOV
        local yessir = true
        wait(0.03)
        local yessir = false
        if logtype() == "rConsole" then rconsoleprint("set fov to the one when u executed\n") else print("changed fov to the one when u executed") end
    end
}


appendfile("aloaded/info.txt", "cfgtheme | ")





































































































































































































--////////Chat commands\\\\\\\\\\--

game:GetService("Players").LocalPlayer.Chatted:connect(function(msg)
if (string.lower(msg) == "!unload") then
        library:Unload()
        game.Workspace.CurrentCamera.FieldOfView = startFOV
        if logtype() == "rConsole" then rconsoleprint("unloaded ui with chat command\n") else print("unloaded ui with chat command") end
        delfile("aloaded/executed.txt")
    end
end)

game:GetService("Players").LocalPlayer.Chatted:connect(function(msg)
if (string.lower(msg) == "!close") then
        library:Close()
        if logtype() == "rConsole" then rconsoleprint("closed ui with chat command\n") else print("closed ui with chat command") end
    end
end)

game:GetService("Players").LocalPlayer.Chatted:connect(function(msg)
if (string.lower(msg) == "!open") then
        library:Close()
        if logtype() == "rConsole" then rconsoleprint("opened ui with chat command\n") else print("opened ui with chat command") end
    end
end)

game:GetService("Players").LocalPlayer.Chatted:connect(function(msg)
if (string.lower(msg) == "!cmds") then
        game.StarterGui:SetCore("ChatMakeSystemMessage", {
        	Text = "Prefix: !\ncmds - shows all of the commands\nopen - opens the menu\nclose - closes the menu\nunload - unloads the menu\nwatermark - toggles watermark\nlogtype - changes the log type";
        	Color = Color3.fromRGB(25,25,25); --Makes the message red, you can adjust this one
        	Font = Enum.Font.Arial; --Font that you like (to use arial do Enum.Font.Arial, etc...)
        	FontSize = Enum.FontSize.Size96; --I don't recommend changing this, but it's custom also :D
        })
        if logtype() == "rConsole" then rconsoleprint("opened commands with chat command\n") else print("opened commands with chat command") end
    end
end)

game:GetService("Players").LocalPlayer.Chatted:connect(function(msg)
if (string.lower(msg) == "!rejoin") then
        loadstring(game:HttpGet("https://pastebin.com/raw/1gtVMUz3"))()
        delfile("aloaded/executed.txt")
    end
end)

game:GetService("Players").LocalPlayer.Chatted:connect(function(msg)
if (string.lower(msg) == "!kickself") then
        game.Players.LocalPlayer:Kick("You asked for it " .. game.Players.LocalPlayer.Name .. ".")
        delfile("aloaded/executed.txt")
    end
end)

game:GetService("Players").LocalPlayer.Chatted:connect(function(msg)
if (string.lower(msg) == "!logtype") then
        if logType == "rConsole" then
            local logType = "ingameConsole"
            print("Logs will be sent to the ingame console now. Please press F9 to view it.")
            writefile("aloaded/logtype.txt", "ingameConsole")
        elseif logType == "ingameConsole" then
            local logType = "rConsole"
            rconsoleprint("@@WHITE@@")
            rconsoleprint("\nConsole will now be used for logging.\n\n")
            writefile("aloaded/logtype.txt", "rConsole")
        end
        if logtype() == "rConsole" then rconsoleprint("toggled logtype with chat command\n") else print("toggled logtype with chat command") end
    end
end)

appendfile("aloaded/info.txt", "cmds | ")

appendfile("aloaded/info", "loaded")

print("loaded, please make sure to unload before exitting or you will be rekt.")
